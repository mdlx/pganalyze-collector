# Copyright (c) 2014, pganalyze Team <team@pganalyze.com>
# All rights reserved.

import logging
import sys
from pgacollector.Conversation import Conversation

logger = logging.getLogger(__name__)

"""
./pganalyze-collector --wizard?

*** Do you want to configure the pganalyze collector?
* Yes / no

*** Using config file: <<pgaconf>>

# Finds something responding on unixdomain socket on 5432

    *** Found a database on the current system at port 5432, should we use that?
    * (y)es: Use local database at port 5432
    * (n)o: I want to use a different database


# Doesn't find anything or user answers no
    *** What's your databases hostname and port?
    *** e.g. localhost:5432

# Postgres requires explicit authentication
    *** We need an username to connect to the database

# Postgres requires md5 authentication
    *** We need a password to connect to the database

    # We get a pg_hba conf entry error
    *** Seems you need to add a pg_hba.conf entry for your current user
    *** See http://www.postgresql.org/docs/current/static/auth-pg-hba-conf.html for information
    *** Reload the database after changing this entry and try again

# Postgres version too old
    *** Sorry, your Postgres version is too old to support pg_stat_statements with query normalization
    *** See https://wiki.postgresql.org/wiki/What's_new_in_PostgreSQL_9.2#pg_stat_statements for details

# Not superuser
    *** Sorry, your user doesn't have superuser privileges. Please do a
    *** ALTER ROLE <<yourusername>> SUPERUSER and try again or use a different username
    *** This is required for yadda...

# Fetch list of databases
*** Which database should we connect to?

# If config has changed: Save config
    *** Saving the currently configured parameters to <<pgaconf>>

# pg_stat_statements is missing from pg_available_extensions
    *** The postgres contrib package needs to be installed postgresql-contrib-x.y -- postgresqlxy-contrib

    *** After installing the contrib package, also make sure to put these settings in <<conffile>>


# pg_stat_statements is missing from <<conffile>>
    *** We're missing some settings in your servers config file.
    *** Should I add these to <<conffile>> or are you doing this yourself?
---
shared_preload_libraries = 'pg_stat_statements'

# Track statements generated by stored procedures as well
pg_stat_statements.track = all

# Increase the max size of the query strings Postgres records (9.2 & 9.3)
track_activity_query_size = 2048
---


# pg_stat_statements is missing from shared_preload_libraries

    *** To activate the new postgresql.conf settings the database needs to be restarted
    *** Please run <<service postgresql restart>>
    *** If you can't do this right now, you can run this script again after you've done this and we'll continue from where we left off


# prompt for API key unless already existing

    *** Sending data to pganalyze requires an API key, you can find yours at https://pganalyze.com/users/edit

# Test API key
    *** API key correct, all good to go
    *** Submitted a sample containing <<querycount>> queries


# If cronjob is not present

    *** To send data automatically, we need to put the collector into a crontab.
    *** This cronjob will run the collector once every ten minutes.
    *** Should I add it to the crontab of user <<user>>? If not, add it manually somewhere

    */10 * * * *    <<absolute pganalyze path>> --config <<conffile>> --cron
"""


class Wizard():

    def __init__(self):
        pass

    def do_the_things(self):
        # I'll
        pass

class SampleConversation():
    def __init__(self):
        self.c = Conversation()

    def converse(self):

        lines = [
            'This is a demo for the future pganalyze conversation menu',
            'You can learn more about pganalyze at ' + self.c.Style.BRIGHT + 'http://pganalyze.com' + self.c.Style.NORMAL,
            'to continue you need to answer a simple question',
        ]

        self.c.tell(lines)

        options = [
            ['Choose life', 'LIFE'],
            ['Pick death', 'DEATH', 'death'],
            ['Ich will Kuehe', 'moo'],
        ]

        self.c.ask(["What is your greatest desire?"])
        option = self.c.prompt_options(options)
        self.c.tell("You picked %s" % option)

        should_continue = self.c.prompt_bool("Should we go on?")
        if should_continue:
            self.c.tell('Great, moving on')
        else:
            self.c.warn('Blowing up!')
            sys.exit(42)

        answer = self.c.prompt("What is the answer to life and everything?")
        self.c.tell('You picked ' + answer + ' how daring!')

        self.c.warn("Reached the end, aborting!")
